from typing import Any
from contextlib import suppress
from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery

import app.database.requests as rq
import app.database.models as md
import app.keyboards.profile_keyboards as pk


main_router = Router()
main_router.message.filter(F.chat.type == 'supergroup')
person_id = None


@main_router.message(CommandStart())
async def cmd_start(message: Message) -> Any:
    await rq.set_chat(chat_name=message.chat.title, chat_id=message.chat.id)
    await rq.set_user(chat_id=message.chat.id, user_id=message.from_user.id)
    await rq.set_item(chat_id=message.chat.id, user_id=message.from_user.id)
    await message.answer("–ù—É, –∑–¥–∞—Ä–æ–≤–∞, –û—Ç–µ—Ü!")


@main_router.message(Command(commands=['all_commands']))
async def cmd_all_commands(message: Message) -> Any:
    await message.answer("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n/shop\n/profile\n/casino [—Å—Ç–∞–≤–∫–∞]\n\n–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n—É–¥–∞—Ä–∏—Ç—å\n—Å—É–∏—Ü–∏–¥\\—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ\\—É–±–∏—Ç—å —Å–µ–±—è\n–ª–∏–∑–±\\–ª–∏–∑–Ω—É—Ç—å\n—Ä—É–ª–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞] [–ø—É–ª–∏ –≤ –±–∞—Ä–∞–±–∞–Ω–µ]\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n+–≥–µ–Ω–¥–µ—Ä [—Ç–≤–æ–π –≥–µ–Ω–¥–µ—Ä]\n+–≥–æ—Ä–æ–¥ [—Ç–≤–æ–π –≥–æ—Ä–æ–¥]\n+–Ω–∞—Ü–∏—è\\+–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å [—Ç–≤–æ—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å]")


@main_router.message(Command(commands=['profile']))
async def cmd_profile(message: Message) -> Any:
    reply = message.reply_to_message
    if not reply:
        mention = message.from_user.mention_html(message.from_user.first_name)
        user = await rq.get_user(message.from_user.id)
    elif reply:
        mention = reply.from_user.mention_html(reply.from_user.first_name)
        user = await rq.get_user(reply.from_user.id)

    with suppress(TelegramBadRequest):
                await message.reply(f"–¢–≤–æ–π –ø—Ä–æ–≤–∏–ª—å: {mention}\n\n–ó–¥–æ—Ä–æ–≤—å–µ: {user.health}‚ù§Ô∏è\n–°—á–∞—Å—Ç—å–µ: {user.happiness}üéâ\n–£—Å—Ç–∞–ª–æ—Å—Ç—å: {user.fatigue}ü•±\n–ë–∞–ª–∞–Ω—Å: {user.money}üí∞\n–ö–æ—Å—Ç—é–º: {user.suit}üëô\n–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {user.nation}üëΩ\n–ì–µ–Ω–¥–µ—Ä: {user.gender}‚ößÔ∏è\n–ì–æ—Ä–æ–¥: {user.city}üèôÔ∏è", parse_mode="HTML", reply_markup=pk.main)


@main_router.callback_query(F.data == 'back_profile')
async def back_profile(callback: Message) -> Any:
    mention = callback.from_user.mention_html(callback.from_user.first_name)
    user = await rq.get_user(callback.from_user.id)

    with suppress(TelegramBadRequest):
        await callback.answer(None)
        await callback.message.reply(text=f"–¢–≤–æ–π –ø—Ä–æ–≤–∏–ª—å: {mention}\n\n–ó–¥–æ—Ä–æ–≤—å–µ: {user.health}‚ù§Ô∏è\n–°—á–∞—Å—Ç—å–µ: {user.happiness}üéâ\n–£—Å—Ç–∞–ª–æ—Å—Ç—å: {user.fatigue}ü•±\n–ë–∞–ª–∞–Ω—Å: {user.money}üí∞\n–ö–æ—Å—Ç—é–º: {user.suit}üëô\n–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {user.nation}üëΩ\n–ì–µ–Ω–¥–µ—Ä: {user.gender}‚ößÔ∏è\n–ì–æ—Ä–æ–¥: {user.city}üèôÔ∏è", parse_mode="HTML", reply_markup=pk.main)


@main_router.callback_query(F.data == 'food_prof')
async def food_profile(callback: CallbackQuery) -> Any:
    reply = callback.message.reply_to_message
    if reply.from_user.id == callback.from_user.id:
        has_scooby_snack = False
        has_five_for_three = False
        item = await rq.get_item(callback.from_user.id)
        mention = callback.from_user.mention_html(callback.from_user.first_name)
        if item.scooby_snack > 0:
            has_scooby_snack = True
        if item.five_for_threehundred > 0:
            has_five_for_three = True
        if has_scooby_snack == False and has_five_for_three == False:
            await callback.message.answer(f"{mention}, —É —Ç–µ–±—è –Ω–µ—Ç –µ–¥—ã", parse_mode="HTML")
        elif has_scooby_snack == True and has_five_for_three == False:
            await callback.message.answer(f"{mention}, —Ç–≤–æ—è –∂—Ä–∞—Ç–≤–∞:\n–°–∫—É–±–∏ –°–Ω—ç–∫: {item.scooby_snack}", parse_mode="HTML", reply_markup=pk.eat)
        elif has_scooby_snack == False and has_five_for_three == True:
            await callback.message.answer(f"{mention}, —Ç–≤–æ—è –∂—Ä–∞—Ç–≤–∞:\n5 –∑–∞ 300: {item.five_for_threehundred}", parse_mode="HTML", reply_markup=pk.eat)
        elif has_scooby_snack == True and has_five_for_three == True:
            await callback.message.answer(f"{mention}, —Ç–≤–æ—è –∂—Ä–∞—Ç–≤–∞:\n–°–∫—É–±–∏ –°–Ω—ç–∫: {item.scooby_snack}\n5 –∑–∞ 300: {item.five_for_threehundred}", parse_mode="HTML", reply_markup=pk.eat)
        await callback.answer(None)
    elif reply.from_user.id != callback.from_user.id:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–ï. –î–õ–Ø. –¢–ï–ë–Ø.")


@main_router.callback_query(F.data == 'eat_scooby_snack')
async def eat_scooby_snack(callback: CallbackQuery) -> Any:
    user = await rq.get_user(callback.from_user.id)
    item = await rq.get_item(callback.from_user.id)
    mention = callback.from_user.mention_html(callback.from_user.first_name)
    if item.scooby_snack > 0:
        item.scooby_snack -= 1
        user.health += 15
        user.happiness += 15
        user.fatigue -= 15
        async with md.async_session() as session:
            await session.merge(user)
            await session.merge(item)
            await session.commit()
        await callback.message.answer(f"–°–∫—É–±–∏ –°–Ω—ç–∫ –±—ã–ª –ø–æ–≥–ª–æ—à—ë–Ω {mention}", parse_mode="HTML")
    elif item.scooby_snack <= 0:
        await callback.message.answer(f"{mention}, —É —Ç–µ–±—è –Ω–µ—Ç —Å–∫—É–±–∏—Å–Ω—ç–∫–æ–≤", parse_mode="HTML")
    await callback.answer(None)


@main_router.callback_query(F.data == 'eat_five_for_three')
async def eat_five_for_three(callback: CallbackQuery) -> Any:
    user = await rq.get_user(callback.from_user.id)
    item = await rq.get_item(callback.from_user.id)
    mention = callback.from_user.mention_html(callback.from_user.first_name)
    if item.five_for_threehundred > 0:
        user.health += 69
        user.happiness += 52
        user.fatigue -= 47
        item.five_for_threehundred -= 1
        async with md.async_session() as session:
            await session.merge(user)
            await session.merge(item)
            await session.commit()
        await callback.message.answer(f"5 –∑–∞ 300 –±—ã–ª –ø–æ–≥–ª–æ—à—ë–Ω {mention}", parse_mode="HTML")
    elif item.five_for_threehundred <= 0:
        await callback.message.answer(f"{mention}, —É —Ç–µ–±—è –Ω–µ—Ç 5 –∑–∞ 300", parse_mode="HTML")
    await callback.answer(None)


@main_router.callback_query(F.data == 'clothes_prof')
async def clothes_profile(callback: CallbackQuery) -> Any:
    reply = callback.message.reply_to_message
    if reply.from_user.id == callback.from_user.id:
        item = await rq.get_item(callback.from_user.id)
        mention = callback.from_user.mention_html(callback.from_user.first_name)
        if item.latex_suit == False and item.crusader_suit == False and item.clown_suit == False:
            await callback.message.answer(f"{mention}, —É —Ç–µ–±—è –Ω–µ—Ç –æ–¥–µ–∂–¥—ã", parse_mode="HTML")
        elif item.latex_suit == True and item.crusader_suit == False and item.clown_suit == False:
            await callback.message.answer(f"{mention}, –≤ —Ç–≤–æ—ë–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ:\n–õ–∞—Ç–µ–∫—Å", parse_mode="HTML", reply_markup=pk.latex)
        elif item.latex_suit == False and item.crusader_suit == True and item.clown_suit == False:
            await callback.message.answer(f"{mention}, –≤ —Ç–≤–æ—ë–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ:\n–ö–æ—Å—Ç—é–º –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å—Ü–∞", parse_mode="HTML", reply_markup=pk.crusader)
        elif item.latex_suit == False and item.crusader_suit == False and item.clown_suit == True:
            await callback.message.answer(f"{mention}, –≤ —Ç–≤–æ—ë–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ:\n–ö–æ—Å—Ç—é–º –∫–ª–æ—É–Ω–∞", parse_mode="HTML", reply_markup=pk.clown)
        elif item.latex_suit == True and item.crusader_suit == True and item.clown_suit == False:
            await callback.message.answer(f"{mention}, –≤ —Ç–≤–æ—ë–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ:\n–õ–∞—Ç–µ–∫—Å\n–ö–æ—Å—Ç—é–º –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å—Ü–∞", parse_mode="HTML", reply_markup=pk.latex_crusader)
        elif item.latex_suit == True and item.crusader_suit == False and item.clown_suit == True:
            await callback.message.answer(f"{mention}, –≤ —Ç–≤–æ—ë–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ:\n–õ–∞—Ç–µ–∫—Å\n–ö–æ—Å—Ç—é–º –∫–ª–æ—É–Ω–∞", parse_mode="HTML", reply_markup=pk.latex_clown)
        elif item.latex_suit == False and item.crusader_suit == True and item.clown_suit == True:
            await callback.message.answer(f"{mention}, –≤ —Ç–≤–æ—ë–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ:\n–ö–æ—Å—Ç—é–º –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å—Ü–∞\n–ö–æ—Å—Ç—é–º –∫–ª–æ—É–Ω–∞", parse_mode="HTML", reply_markup=pk.crusader_clown)
        elif item.latex_suit == True and item.crusader_suit == True and item.clown_suit == True:
            await callback.message.answer(f"{mention}, –≤ —Ç–≤–æ—ë–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ:\n–õ–∞—Ç–µ–∫—Å\n–ö–æ—Å—Ç—é–º –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å—Ü–∞\n–ö–æ—Å—Ç—é–º –∫–ª–æ—É–Ω–∞", parse_mode="HTML", reply_markup=pk.latex_crusader_clown)
        await callback.answer(None)
    elif reply.from_user.id != callback.from_user.id:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–æ—Å–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è —Ü–≤–µ–ª–∞")


@main_router.callback_query(F.data == 'wear_latex')
async def wear_latex(callback: CallbackQuery) -> Any:
    user = await rq.get_user(callback.from_user.id)
    item = await rq.get_item(callback.from_user.id)
    if item.latex_suit == True:
        user.suit = "–õ–∞—Ç–µ–∫—Å–Ω—ã–π –∫–æ—Å—Ç—é–º"
        async with md.async_session() as session:
            await session.merge(user)
            await session.commit()
        await callback.message.answer("–õ–∞—Ç–µ–∫—Å–Ω—ã–π –∫–æ—Å—Ç—é–º –Ω–∞–¥–µ—Ç, —Ç–≤–æ—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —è–≤–Ω–æ –≤—ã—Ä–æ—Å–ª–∞")
    elif item.latex_suit == False:
        await callback.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ª–∞—Ç–µ–∫—Å–Ω–æ–≥–æ –∫–æ—Å—Ç—é–º–∞")
    await callback.answer(None)


@main_router.callback_query(F.data == 'wear_crusader')
async def wear_crusader(callback: CallbackQuery) -> Any:
    user = await rq.get_user(callback.from_user.id)
    item = await rq.get_item(callback.from_user.id)
    if item.crusader_suit == True:
        user.suit = "–ö–æ—Å—Ç—é–º –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å—Ü–∞"
        async with md.async_session() as session:
            await session.merge(user)
            await session.commit()
        await callback.message.answer("–ö–æ—Å—Ç—é–º –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å—Ü–∞ –Ω–∞–¥–µ—Ç, –ø–æ—Ä–∞ —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ—Ö–æ–¥ –Ω–∞ —Å–≤—è—â–µ–Ω–Ω—É—é –∑–µ–º–ª—é –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –µ—ë –æ—Ç –µ—Ä–µ—Ç–∏–∫–æ–≤!")
    elif item.crusader_suit == False:
        await callback.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Å—Ç—é–º–∞ –∫—Ä–µ—Å—Ç–æ–Ω–æ—Å—Ü–∞")
    await callback.answer(None)


@main_router.callback_query(F.data == 'wear_clown')
async def wear_clown(callback: CallbackQuery) -> Any:
    user = await rq.get_user(callback.from_user.id)
    item = await rq.get_item(callback.from_user.id)
    if item.clown_suit == True:
        user.suit = "–ö–ª–æ—É–Ω—Å–∫–∏–π –∫–æ—Å—Ç—é–º"
        async with md.async_session() as session:
            await session.merge(user)
            await session.commit()
        await callback.message.answer("–ö–ª–æ—É–Ω—Å–∫–∏–π –∫–æ—Å—Ç—é–º –Ω–∞–¥–µ—Ç, –µ–±–∞—Ç—å —Ç—ã, –∫–æ–Ω–µ—á–Ω–æ, –∫–ª–æ—É–Ω, —Ö–æ–Ω–∫-—Ö–æ–Ω–∫ –±–ª—è—Ç—å!")
    elif item.clown_suit == False:
        await callback.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Å—Ç—é–º–∞ –∫–ª–æ—É–Ω–∞")
    await callback.answer(None)


@main_router.message(F.text == '–∫–æ–ª–ª–±—ç–∫')
async def check_callback(message: Message):
    await message.reply("test callback button", reply_markup=pk.test_callback)


@main_router.callback_query(F.data == 'callback_test')
async def callback_test(callback: CallbackQuery) -> Any:
    reply = callback.message.reply_to_message
    await callback.answer(None)
    await callback.message.answer(f"{callback.from_user.id} || {reply.from_user.id}")